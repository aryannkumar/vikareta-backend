// Complete Prisma schema for Vikareta B2B Marketplace
// Based on deep codebase analysis - includes all necessary tables

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE USER MANAGEMENT
// ================================

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String?   @unique @db.VarChar(255)
  phone             String?   @unique @db.VarChar(20)
  passwordHash      String?   @map("password_hash") @db.VarChar(255)
  firstName         String?   @map("first_name") @db.VarChar(100)
  lastName          String?   @map("last_name") @db.VarChar(100)
  businessName      String?   @map("business_name") @db.VarChar(255)
  gstin             String?   @db.VarChar(15)
  userType          String    @default("user") @map("user_type") @db.VarChar(20)
  verificationTier  String    @default("basic") @map("verification_tier") @db.VarChar(20)
  isVerified        Boolean   @default(false) @map("is_verified")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  wallet            Wallet?
  products          Product[]
  rfqs              Rfq[]
  quotes            Quote[]
  buyerOrders       Order[]   @relation("BuyerOrders")
  sellerOrders      Order[]   @relation("SellerOrders")
  shoppingCart      ShoppingCart?
  notifications     Notification[]
  subscriptions     Subscription[]
  follows           Follow[] @relation("UserFollows")
  followers         Follow[] @relation("UserFollowers")
  adCampaigns       AdCampaign[]
  services          Service[]

  @@map("users")
}

// ================================
// PRODUCT CATALOG
// ================================

model Category {
  id          String    @id @default(cuid()) @db.VarChar(50)
  name        String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  icon        String?   @db.VarChar(100)
  featured    Boolean   @default(false)
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  subcategories    Subcategory[]
  products         Product[]
  rfqs             Rfq[]
  services         Service[]

  @@map("categories")
}

model Subcategory {
  id          String    @id @default(cuid()) @db.VarChar(50)
  categoryId  String    @map("category_id") @db.VarChar(50)
  name        String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products     Product[]
  rfqs         Rfq[]
  services     Service[]

  @@index([categoryId])
  @@map("subcategories")
}

model Product {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId         String    @map("seller_id") @db.Uuid
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  categoryId       String    @map("category_id") @db.VarChar(50)
  subcategoryId    String?   @map("subcategory_id") @db.VarChar(50)
  price            Decimal   @db.Decimal(10, 2)
  currency         String    @default("INR") @db.VarChar(3)
  stockQuantity    Int       @default(0) @map("stock_quantity")
  minOrderQuantity Int       @default(1) @map("min_order_quantity")
  isService        Boolean   @default(false) @map("is_service")
  status           String    @default("active") @db.VarChar(20)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  seller       User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category     Category        @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory?    @relation(fields: [subcategoryId], references: [id])
  media        ProductMedia[]
  variants     ProductVariant[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  quoteItems   QuoteItem[]
  featuredProducts FeaturedProduct[]

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @map("product_id") @db.Uuid
  name      String  @db.VarChar(255)
  sku       String? @db.VarChar(100)
  price     Decimal @db.Decimal(10, 2)
  stock     Int     @default(0)
  isActive  Boolean @default(true) @map("is_active")

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model ProductMedia {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String  @map("product_id") @db.Uuid
  mediaType String  @map("media_type") @db.VarChar(20)
  url       String  @db.VarChar(500)
  altText   String? @map("alt_text") @db.VarChar(255)
  sortOrder Int     @default(0) @map("sort_order")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_media")
}

model FeaturedProduct {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  position  Int      @default(0)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId])
  @@map("featured_products")
}

// ================================
// SERVICES
// ================================

model Service {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerId    String    @map("provider_id") @db.Uuid
  title         String    @db.VarChar(255)
  description   String?   @db.Text
  categoryId    String    @map("category_id") @db.VarChar(50)
  subcategoryId String?   @map("subcategory_id") @db.VarChar(50)
  price         Decimal   @db.Decimal(10, 2)
  currency      String    @default("INR") @db.VarChar(3)
  duration      String?   @db.VarChar(100)
  status        String    @default("active") @db.VarChar(20)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  provider    User         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  media       ServiceMedia[]
  featuredServices FeaturedService[]

  @@map("services")
}

model ServiceMedia {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId String  @map("service_id") @db.Uuid
  mediaType String  @map("media_type") @db.VarChar(20)
  url       String  @db.VarChar(500)
  altText   String? @map("alt_text") @db.VarChar(255)
  sortOrder Int     @default(0) @map("sort_order")

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_media")
}

model FeaturedService {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId String   @map("service_id") @db.Uuid
  position  Int      @default(0)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId])
  @@map("featured_services")
}

// ================================
// RFQ & QUOTES
// ================================

model Rfq {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId          String    @map("buyer_id") @db.Uuid
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  categoryId       String    @map("category_id") @db.VarChar(50)
  subcategoryId    String?   @map("subcategory_id") @db.VarChar(50)
  quantity         Int?
  budgetMin        Decimal?  @map("budget_min") @db.Decimal(10, 2)
  budgetMax        Decimal?  @map("budget_max") @db.Decimal(10, 2)
  deliveryTimeline String?   @map("delivery_timeline") @db.VarChar(100)
  status           String    @default("active") @db.VarChar(20)
  expiresAt        DateTime? @map("expires_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  buyer       User         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  quotes      Quote[]

  @@index([categoryId, subcategoryId])
  @@index([status, expiresAt])
  @@map("rfqs")
}

model Quote {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfqId            String    @map("rfq_id") @db.Uuid
  sellerId         String    @map("seller_id") @db.Uuid
  totalPrice       Decimal   @map("total_price") @db.Decimal(10, 2)
  deliveryTimeline String?   @map("delivery_timeline") @db.VarChar(100)
  termsConditions  String?   @map("terms_conditions") @db.Text
  status           String    @default("pending") @db.VarChar(20)
  validUntil       DateTime? @map("valid_until")
  createdAt        DateTime  @default(now()) @map("created_at")

  rfq        Rfq         @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  seller     User        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  items      QuoteItem[]
  orders     Order[]

  @@index([rfqId, sellerId])
  @@index([status, validUntil])
  @@map("quotes")
}

model QuoteItem {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quoteId    String  @map("quote_id") @db.Uuid
  productId  String  @map("product_id") @db.Uuid
  quantity   Int
  unitPrice  Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal @map("total_price") @db.Decimal(10, 2)

  quote   Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([quoteId])
  @@map("quote_items")
}

// ================================
// SHOPPING CART & ORDERS
// ================================

model ShoppingCart {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("shopping_carts")
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String   @map("cart_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  variantId String?  @map("variant_id") @db.Uuid
  quantity  Int      @default(1)
  unitPrice Decimal  @map("unit_price") @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  cart    ShoppingCart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId          String    @map("buyer_id") @db.Uuid
  sellerId         String    @map("seller_id") @db.Uuid
  quoteId          String?   @map("quote_id") @db.Uuid
  orderNumber      String    @unique @map("order_number") @db.VarChar(50)
  subtotal         Decimal   @db.Decimal(10, 2)
  taxAmount        Decimal   @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount   Decimal   @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount   Decimal   @map("discount_amount") @db.Decimal(10, 2)
  totalAmount      Decimal   @map("total_amount") @db.Decimal(10, 2)
  status           String    @default("pending") @db.VarChar(20)
  paymentStatus    String    @default("pending") @map("payment_status") @db.VarChar(20)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  buyer               User                 @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller              User                 @relation("SellerOrders", fields: [sellerId], references: [id])
  quote               Quote?               @relation(fields: [quoteId], references: [id])
  items               OrderItem[]

  @@index([buyerId, createdAt])
  @@index([sellerId, createdAt])
  @@index([status, paymentStatus])
  @@map("orders")
}

model OrderItem {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId    String  @map("order_id") @db.Uuid
  productId  String  @map("product_id") @db.Uuid
  variantId  String? @map("variant_id") @db.Uuid
  quantity   Int
  unitPrice  Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal @map("total_price") @db.Decimal(10, 2)

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// ================================
// WALLET & PAYMENTS
// ================================

model Wallet {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @unique @map("user_id") @db.Uuid
  availableBalance Decimal  @default(0) @map("available_balance") @db.Decimal(12, 2)
  lockedBalance    Decimal  @default(0) @map("locked_balance") @db.Decimal(12, 2)
  negativeBalance  Decimal  @default(0) @map("negative_balance") @db.Decimal(12, 2)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]
  lockedAmounts LockedAmount[]

  @@map("wallets")
}

model WalletTransaction {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletId               String   @map("wallet_id") @db.Uuid
  transactionType        String   @map("transaction_type") @db.VarChar(20)
  amount                 Decimal  @db.Decimal(12, 2)
  balanceAfter           Decimal  @map("balance_after") @db.Decimal(12, 2)
  referenceType          String?  @map("reference_type") @db.VarChar(50)
  referenceId            String?  @map("reference_id") @db.Uuid
  description            String?  @db.Text
  createdAt              DateTime @default(now()) @map("created_at")

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, createdAt])
  @@index([transactionType, createdAt])
  @@map("wallet_transactions")
}

model LockedAmount {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletId    String   @map("wallet_id") @db.Uuid
  amount      Decimal  @db.Decimal(12, 2)
  reason      String   @db.VarChar(100)
  referenceId String?  @map("reference_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  releasedAt  DateTime? @map("released_at")

  wallet     Wallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  adCampaign AdCampaign?

  @@map("locked_amounts")
}

// ================================
// COUPONS & DEALS
// ================================

model Coupon {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String    @unique @db.VarChar(50)
  discountType   String    @map("discount_type") @db.VarChar(20)
  discountValue  Decimal   @map("discount_value") @db.Decimal(10, 2)
  minOrderAmount Decimal?  @map("min_order_amount") @db.Decimal(10, 2)
  maxDiscount    Decimal?  @map("max_discount") @db.Decimal(10, 2)
  usageLimit     Int?      @map("usage_limit")
  usedCount      Int       @default(0) @map("used_count")
  expiresAt      DateTime? @map("expires_at")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@index([code, isActive])
  @@index([expiresAt, isActive])
  @@map("coupons")
}

model Deal {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar(255)
  description String?   @db.Text
  discountType String   @map("discount_type") @db.VarChar(20)
  discountValue Decimal @map("discount_value") @db.Decimal(10, 2)
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([isActive, startDate, endDate])
  @@map("deals")
}

// ================================
// SOCIAL FEATURES
// ================================

model Follow {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  type      String   @db.VarChar(50)
  status    String   @default("active") @db.VarChar(20)
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("subscriptions")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String   @db.VarChar(255)
  message   String   @db.Text
  type      String   @db.VarChar(50)
  isRead    Boolean  @default(false) @map("is_read")
  data      Json?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ================================
// ADVERTISEMENT SYSTEM
// ================================

model AdCampaign {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId      String   @map("business_id") @db.Uuid
  name            String   @db.VarChar(255)
  budget          Decimal  @db.Decimal(10, 2)
  dailyBudget     Decimal? @map("daily_budget") @db.Decimal(10, 2)
  spentAmount     Decimal  @default(0) @map("spent_amount") @db.Decimal(10, 2)
  status          String   @default("active") @db.VarChar(20)
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  lockedAmountId  String?  @unique @map("locked_amount_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  business      User          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  lockedAmount  LockedAmount? @relation(fields: [lockedAmountId], references: [id])
  advertisements Advertisement[]
  analytics     AdAnalytics[]

  @@index([businessId, status])
  @@index([status, startDate, endDate])
  @@map("ad_campaigns")
}

model Advertisement {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId String   @map("campaign_id") @db.Uuid
  title      String   @db.VarChar(255)
  content    String   @db.Text
  imageUrl   String?  @map("image_url") @db.VarChar(500)
  targetUrl  String   @map("target_url") @db.VarChar(500)
  adType     String   @map("ad_type") @db.VarChar(50)
  status     String   @default("active") @db.VarChar(20)
  createdAt  DateTime @default(now()) @map("created_at")

  campaign    AdCampaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  impressions AdImpression[]
  clicks      AdClick[]

  @@index([campaignId, status])
  @@map("advertisements")
}

model AdPlacement {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  location    String   @db.VarChar(100)
  dimensions  Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  impressions AdImpression[]

  @@map("ad_placements")
}

model AdImpression {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  advertisementId String   @map("advertisement_id") @db.Uuid
  placementId     String   @map("placement_id") @db.Uuid
  userId          String?  @map("user_id") @db.Uuid
  ipAddress       String   @map("ip_address") @db.VarChar(45)
  userAgent       String   @map("user_agent") @db.Text
  platform        String   @db.VarChar(50)
  cost            Decimal  @db.Decimal(8, 4)
  createdAt       DateTime @default(now()) @map("created_at")

  advertisement Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
  placement     AdPlacement   @relation(fields: [placementId], references: [id])

  @@index([advertisementId, createdAt])
  @@index([placementId, createdAt])
  @@map("ad_impressions")
}

model AdClick {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  advertisementId String   @map("advertisement_id") @db.Uuid
  impressionId    String?  @map("impression_id") @db.Uuid
  userId          String?  @map("user_id") @db.Uuid
  ipAddress       String   @map("ip_address") @db.VarChar(45)
  userAgent       String   @map("user_agent") @db.Text
  platform        String   @db.VarChar(50)
  cost            Decimal  @db.Decimal(8, 4)
  createdAt       DateTime @default(now()) @map("created_at")

  advertisement Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  @@index([advertisementId, createdAt])
  @@map("ad_clicks")
}

model AdAnalytics {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId   String   @map("campaign_id") @db.Uuid
  date         DateTime
  impressions  Int      @default(0)
  clicks       Int      @default(0)
  conversions  Int      @default(0)
  spend        Decimal  @default(0) @db.Decimal(10, 2)
  revenue      Decimal  @default(0) @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  campaign AdCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date], name: "campaignId_date")
  @@index([campaignId, date])
  @@map("ad_analytics")
}